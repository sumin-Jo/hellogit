<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="userMap"
        type="project.star.b2.model.User">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="userno" column="userno" />
        <result property="name" column="name" />
        <result property="email" column="email" />
        <result property="passwd" column="passwd" />
        <result property="tel" column="tel" />
        <result property="regdate" column="regdate" />
        <result property="editdate" column="editdate" />
        <result property="profile_img" column="profile_img" />
    </resultMap>

    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem"
        parameterType="project.star.b2.model.User"
        resultMap="userMap">
        SELECT userno, name, email, passwd, tel, regdate, editdate, profile_img FROM user WHERE userno=#{userno};
    </select>

    <!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList"
        parameterType="project.star.b2.model.User"
        resultMap="userMap">
        SELECT userno, name, email, passwd, tel, regdate, editdate, profile_img FROM user
        
        <where>
            <if test="name != null and name != ''">
                name LIKE concat('%', #{name}, '%')
            </if>
            
            <if test="email != null and email != ''">
                OR email LIKE concat('%', #{email}, '%')
            </if>
            
            <if test="passwd != null and passwd != ''">
                OR passwd LIKE concat('%', #{passwd}, '%')
            </if>
            
            <if test="tel != null and tel != ''">
                OR tel LIKE concat('%', #{tel}, '%')
            </if>
            
            <if test="regdate != null and regdate != ''">
                OR regdate LIKE concat('%', #{regdate}, '%')
            </if>
            
        </where>
        
        ORDER BY userno ASC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>

    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem"
        parameterType="project.star.b2.model.User"
        useGeneratedKeys="true"
        keyProperty="no">
        INSERT INTO user (name, email, passwd, tel, regdate, editdate, profile_img) 
        VALUES (#{name}, #{email}, #{passwd}, #{tel}, #{regdate}, #{editdate}, #{profile_img});
    </insert>

    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem"
        parameterType="project.star.b2.model.User">
        DELETE FROM user WHERE userno=#{userno};
    </delete>

    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem"
        parameterType="project.star.b2.model.User">
        UPDATE user SET name=#{name}, email=#{email}, passwd=#{passwd}, tel=#{tel}, profile_img=#{profile_img}
        WHERE userno=#{userno};
    </update>
    
    <!--
        조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다.
        count, max, min, sum, avg 함수를 사용한 경우 Mapper에서는
        resultMap이 아닌 resultType으로 반환한다.
    -->
    <select id="selectCountAll" 
            parameterType="project.star.b2.model.User"
            resultType="int">
        SELECT COUNT(*) FROM user
        
        <where>
            <if test="name != null and name != ''">
                name LIKE concat('%', #{name}, '%')
            </if>
            
            <if test="email != null and email != ''">
                OR email LIKE concat('%', #{email}, '%')
            </if>
            
            <if test="passwd != null and passwd != ''">
                OR passwd LIKE concat('%', #{passwd}, '%')
            </if>
            
            <if test="tel != null and tel != ''">
                OR tel LIKE concat('%', #{tel}, '%')
            </if>
            
            <if test="regdate != null and regdate != ''">
                OR regdate LIKE concat('%', #{regdate}, '%')
            </if>
        </where>
    </select>

</mapper>