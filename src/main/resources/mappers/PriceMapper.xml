<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="PriceMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="priceMap"
        type="project.star.b2.model.Price">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="priceno" column="priceno" />
        <result property="deposit" column="deposit" />
        <result property="dealingtype" column="dealingtype" />
        <result property="price" column="price" />
        <result property="short_room" column="short_room" />
        <result property="roomno" column="roomno" />
    </resultMap>

    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem"
        parameterType="project.star.b2.model.Price"
        resultMap="priceMap">
        SELECT priceno, deposit, dealingtype, price, short_room, roomno
        FROM price 
        WHERE priceno=#{priceno};
    </select>

    <!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList"
        parameterType="project.star.b2.model.Price"
        resultMap="priceMap">
        SELECT priceno, deposit, dealingtype, price, short_room, roomno
        FROM price
        
        <where>
            <if test="dealingtype != null and dealingtype != ''">
                dealingtype LIKE concat('%', #{dealingtype}, '%')
            </if>
            
            <if test="short_room != null and short_room != ''">
                OR short_room LIKE concat('%', #{short_room}, '%')
            </if>
        </where>
        
        ORDER BY priceno ASC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>

    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem"
        parameterType="project.star.b2.model.Price"
        useGeneratedKeys="true"
        keyProperty="priceno">
        INSERT INTO price (deposit, dealingtype, price, short_room, roomno) 
        VALUES (#{deposit}, #{dealingtype}, #{price}, #{short_room}, #{roomno});
    </insert>

    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem"
        parameterType="project.star.b2.model.Price">
        DELETE FROM price WHERE priceno=#{priceno};
    </delete>

    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem"
        parameterType="project.star.b2.model.Price">
        UPDATE price SET deposit=#{deposit}, dealingtype=#{dealingtype}, price=#{price}, short_room=#{short_room}, roomno=#{roomno}
        WHERE priceno=#{priceno};
    </update>
    
    <!--
        조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다.
        count, max, min, sum, avg 함수를 사용한 경우 Mapper에서는
        resultMap이 아닌 resultType으로 반환한다.
    -->
    <select id="selectCountAll" 
            parameterType="project.star.b2.model.Price"
            resultType="int">
        SELECT COUNT(*) FROM price
        
        <where>
            <if test="dealingtype != null and dealingtype != ''">
                dealingtype LIKE concat('%', #{dealingtype}, '%')
            </if>
            
            <if test="short_room != null and short_room != ''">
                OR short_room LIKE concat('%', #{short_room}, '%')
            </if>
        </where>
    </select>

</mapper>