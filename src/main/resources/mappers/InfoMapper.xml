<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="InfoMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="infoMap"
        type="project.star.b2.model.Info">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="feeitem" column="feeitem" />
        <result property="parking" column="parking" />
        <result property="pet" column="pet" />
        <result property="elevator" column="elevator" />
        <result property="veranda" column="veranda" />
        <result property="builtin" column="builtin" />
        <result property="optionitem" column="optionitem" />
        <result property="loan" column="loan" />
        <result property="supplyarea" column="supplyarea" />
        <result property="maxfloor" column="maxfloor" />
        <result property="heater" column="heater" />
        <result property="commingday" column="commingday" />
        <result property="buildtype" column="buildtype" />
        <result property="content" column="content" />
        <result property="roomno" column="roomno" />
    </resultMap>

    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem"
        parameterType="project.star.b2.model.Info"
        resultMap="infoMap">
        SELECT 
        feeitem, parking, pet, elevator, veranda, builtin, optionitem, loan, supplyarea, maxfloor, heater, commingday,
        buildtype, content, roomno
        FROM info 
        WHERE roomno=#{roomno};
    </select>

    <!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList"
        parameterType="project.star.b2.model.Info"
        resultMap="infoMap">
        SELECT feeitem, parking, pet, elevator, veranda, builtin, optionitem, loan, supplyarea, maxfloor, heater, commingday, buildtype, content, roomno 
        FROM info 
        ORDER BY roomno ASC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>

    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem"
        parameterType="project.star.b2.model.Info"
        useGeneratedKeys="false"
        keyProperty="roomno">
        INSERT INTO info (feeitem, parking, pet, elevator, veranda, builtin, optionitem, loan, supplyarea, maxfloor, heater, commingday, buildtype, content, roomno) 
        VALUES (#{feeitem}, #{parking}, #{pet}, #{elevator}, #{veranda}, #{builtin}, #{optionitem}, #{loan}, #{supplyarea}, #{maxfloor}, #{heater}, #{commingday}, #{buildtype}, #{content}, #{roomno});
    </insert>

    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem"
        parameterType="project.star.b2.model.Info">
        DELETE FROM info WHERE roomno=#{roomno};
    </delete>

    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem"
        parameterType="project.star.b2.model.Info">
        UPDATE info SET feeitem=#{feeitem}, parking=#{parking}, pet=#{pet}, elevator=#{elevator}, veranda=#{veranda}, builtin=#{builtin}, optionitem=#{optionitem}, 
        loan=#{loan}, supplyarea=#{supplyarea}, maxfloor=#{maxfloor}, heater=#{heater}, commingday=#{commingday}, buildtype=#{buildtype}, content=#{content}
        WHERE roomno=#{roomno};
    </update>
    
    <!--
        조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다.
        count, max, min, sum, avg 함수를 사용한 경우 Mapper에서는
        resultMap이 아닌 resultType으로 반환한다.
    -->
    <select id="selectCountAll" 
            parameterType="project.star.b2.model.Info"
            resultType="int">
        SELECT COUNT(*) FROM info
    </select>

</mapper>